name: Overall Test Workflow

on:
  push:
    branches: [ develop, dev/*, release/* ]
  pull_request:
    branches: [ develop, dev/*, release/* ]

jobs:
  #partial-tests:
  #  uses: ./.github/workflows/partial-tests.yml

  latest-versions:
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
        os: [ubuntu-latest]
    permissions:
      pull-requests: write
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}

      - name: Check if the latest version supported is up to date.
        id: ensure-dependencies-are-up-to-date
        working-directory: tools/packages
        run: |
          # Ensure dependencies are aligned between Taipy packages
          pip install -r requirements.txt
          python check-dependencies.py ensure-same-version

          # Try to update the Pipfile.
          # Any new packages available are printed to stdout.
          # If nothing is printed, the Pipfile is up to date and workflow can stop.
          echo 'diff<<EOF' >> "$GITHUB_OUTPUT"
          bash check-dependencies.sh ../../Pipfile >> "$GITHUB_OUTPUT"
          echo EOF >> "$GITHUB_OUTPUT"

      - name: Create the pull_request
        if: steps.ensure-dependencies-are-up-to-date.outputs.diff != '' && matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update dependencies
          committer: TaiBot
          author: TaiBot
          branch: dependencies/update
          title: 'New dependencies available'
          body: |
            ${{ steps.ensure-dependencies-are-up-to-date.outputs.diff }}
          draft: false
        
        # uses: thollander/actions-comment-pull-request@v2
        # with:
        #   message: |
        #     New packages available for ${{ matrix.python-version }}:
        #     ${{ steps.ensure-dependencies-are-up-to-date.outputs.diff }}

      # - name: Install dependencies
      #   if: steps.ensure-dependencies-are-up-to-date.outputs.diff != ''
      #   uses: ./.github/actions/install
      #   with:
      #     python-version: ${{ matrix.python-version }}
      #     os: ${{ matrix.os }}

      # - name: Print Pipfile if update
      #   if: steps.ensure-dependencies-are-up-to-date.outputs.diff != ''
      #   run: cat ../../Pipfile

      # - name: Pytest
      #   if: steps.ensure-dependencies-are-up-to-date.outputs.diff != ''
      #   run: pipenv run pytest -m "not orchestrator_dispatcher and not standalone" --cov=taipy --cov-append --cov-report="xml:overall-coverage.xml" --cov-report term-missing tests

      # - name: Pytest Core orchestrator_dispatcher
      #   if: steps.ensure-dependencies-are-up-to-date.outputs.diff != ''
      #   run: pipenv run pytest -m "orchestrator_dispatcher" tests/core

      # - name: Pytest Core standalone
      #   if: steps.ensure-dependencies-are-up-to-date.outputs.diff != ''
      #   run: pipenv run pytest -m "standalone" tests/core


  # overall-tests:
  #   #needs: [partial-tests]
  #   timeout-minutes: 40
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: ['3.8', '3.9', '3.10', '3.11']
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #       pipenv-version: ['min', 'max']
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{matrix.python-version}}
  #     - name: Check if the latest version supported is up to date.
  #       id: ensure-dependencies-are-up-to-date
  #       working-directory: tools/packages
  #       run: |
  #         # Generate the Pipfile with the latest version
  #         pip install -r requirements.txt
  #         python check-dependencies.py ensure-same-version taipy*/*requirements.txt
  #         # If Pipfile and Pipfile.sup are different, put something in the GitHub conversation
  #         echo 'diff<<EOF' >> "$GITHUB_OUTPUT"
  #         bash check-dependencies.sh ../../Pipfile >> "$GITHUB_OUTPUT"
  #         echo EOF >> "$GITHUB_OUTPUT"
  #         cat ../../Pipfile

  #     - name: Comment PR
  #       if: steps.ensure-dependencies-are-up-to-date.outputs.diff != ''
  #       uses: thollander/actions-comment-pull-request@v2
  #       with:
  #         message: ${{ steps.ensure-dependencies-are-up-to-date.outputs.diff }}

  #     - name: Install dependencies
  #       id: install-dependencies
  #       uses: ./.github/actions/install
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         os: ${{ matrix.os }}
  #         pipenv-version: ${{ matrix.pipenv-version }}

  #     - name: Pytest
  #       run: pipenv run pytest -m "not orchestrator_dispatcher and not standalone" --cov=taipy --cov-append --cov-report="xml:overall-coverage.xml" --cov-report term-missing tests

  #     - name: Coverage
  #       if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && matrix.pipenv-version == 'min'
  #       uses: MishaKav/pytest-coverage-comment@main
  #       with:
  #         pytest-xml-coverage-path: ./overall-coverage.xml
  #         title: Taipy Overall Coverage Report

  # orchestrator-tests:
  #   #needs: [partial-tests]
  #   timeout-minutes: 20
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: ['3.8', '3.9', '3.10', '3.11']
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #       orchestrator: ['orchestrator_dispatcher', 'standalone']
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{matrix.python-version}}

  #     - name: Install pipenv
  #       run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python

  #     - name: Install Dependencies
  #       run: pipenv install --dev --python=${{ matrix.python-version }}

  #     - name: Pytest Core orchestrator_dispatcher
  #       run: pipenv run pytest -m "${{ matrix.orchestrator }}" tests/core
